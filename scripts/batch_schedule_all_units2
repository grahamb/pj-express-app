'use strict';

const models = require('../models');
const moment = require('moment');
const Promise = models.sequelize.Promise;
const createScheduleForUnit = require('../lib/schedules/createScheduleForUnit2');
const DEFAULT_PROGRAM_SELECTION = [13,8,2,15,11,14,16,5,7,18,6,1,10,12,4,3,17];

require('es6-shim');

function getAllUnits() {
  'use strict';
  const sort = process.env.sort || 'ASC';
  return models.Unit.findAll({
    order: `final_payment_date ${sort}`,
    include: [
      {
        model: models.ProgramSelection,
      },
      {
        model: models.ProgramPeriod,
        include: [{all:true}]
      }
    ]
  });
};

function getUnit(id) {
  return models.Unit.find({
    where: {id: id},
    include: [
      models.ProgramSelection,
      {
        model: models.ProgramPeriod,
        include: [{all:true}]
      }
    ]
  });
};

const FREE_PERIOD = 25;
const TOWNSITE = 9;


const main = Promise.coroutine(function* () {
  let units = yield getAllUnits();
  let data = units.map(function(unit) {
    let data = {
      unit_id: unit.id,
      program_selection: [9,2,15],//Array.from(unit.ProgramSelection.program_selection),
      periodsToAssign: 3,//unit.ProgramSelection.extra_free_period ? 9 : 10,
      periodsAssigned: 0,
      extra_free_period: unit.ProgramSelection.extra_free_period
    };

    if (!data.program_selection.length) {
      data.program_selection = Array.from(DEFAULT_PROGRAM_SELECTION);
      data.use_default_program_selection = true;
    }

    // data.program_selection.unshift(TOWNSITE);
    return data;
  });

  let counter = 0;
  while (counter < 3) {
    console.log("\n\n Run %d", counter);
    for (var i = 0; i < data.length; i++) {
      console.log(data[i]);
      console.log('\n');
      let result = yield createScheduleForUnit(data[i], counter);
      data[i] = result;
    };
    counter++;
  }
  console.log(data);
  process.exit();
});

main();